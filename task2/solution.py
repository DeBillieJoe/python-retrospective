def groupby(func, seq):
    """
    Return dictionary of grouped items.

    Values in `seq` and keys generated by `func`
    """

    result = {}

    for element in seq:
        result.setdefault(func(element), []).append(element)

    return result


def zip_with(func, *iterables):
    """
    Generate sequence of elements, where the
    nth element is the result of `func` applied
    to the nth elements of all iterables.
    """

    for args in zip(*iterables):
        yield func(*args)


def compose(func_one, func_two):
    """Return the composition of two functions."""
    return lambda arg: func_one(func_two(arg))


def iterate(func):
    """
    Generate infinite sequence of compositions of `func`.

    The first element is the identity of `func`.

    Return the iteration of `func`.
    """

    current_composition = lambda ident: ident

    while True:
        yield current_composition
        current_composition = compose(func, current_composition)
